作業メモ

・文字コード
/source-charset:utf-8では一部のソースで文字ほげは認識できませんと出るので、
全部utf-8BOM付きに置き換え

・bitboard
 Bitboardの値渡しはなぜかエラーになるので,参照渡しにする

・constexpr
VCのconstexprはいけてない？結構エラーがでる

・unistd.h
使ってるところは丸ごとコメントアウト

・キャスト
double -> Depthへのキャストは一度intを経由する？

・__bultin_ほげ
ビルトイン関数は代替のinlineを用意(builtin.h)

・_mm_movpi64_epi64
VCだとx86のみ有効になっている
x64環境だと_mm_set_epi64xで代替？

・標準出力バッファリング
コメントアウトする
http://yaneuraou.yaneu.com/2015/12/24/%E6%A8%99%E6%BA%96%E5%85%A5%E5%8A%9B%E3%81%AE%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%83%AA%E3%83%B3%E3%82%B0%E5%95%8F%E9%A1%8C/

・SSE2化
SSE4以上の命令を置き換える


・32bit化
32bitで動作させる場合SSEを16byteアライメントにする必要がある
http://yaneuraou.yaneu.com/2016/01/18/x86%E7%92%B0%E5%A2%83%E7%94%A8%E3%81%AB%E3%82%A2%E3%83%A9%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B%E3%81%AE%E3%81%8C%E5%A3%8A%E6%BB%85%E7%9A%84%E3%81%AB%E9%9B%A3/

stlで使っているのでアロケーターを書く

・MSVC版の動作が遅い件
mingw版より30%程遅い？ 原因不明(6/2現在）
一部関数がinline展開されていない
 -> 一部forceinlineにしてみると指し手生成ベンチは速くなるが、
    シングルスレッドベンチはほぼ変わらず

・ベンチでMSVCとmingwでノード数が違う件
指し手のソートをしたときにスコアが同じ手だとMINGWとMSVCで並べかえが違う
その違いで最終的に違いがでる？

すべての手が同じ点の場合
 MSVCは並べ替えなし
 MINGWは順番が入れ替わってる


・6/1ベンチメモ
core i5 1 thread depth 15
time 13525ms

bestmove直前のinfo
1/3
info depth 15 seldepth 25 time 3416 nodes 1092549 nps 319832 hashfull 44 score c
p 469 multipv 1 pv 8d7d P*7f B*6h S*7h 4e5g+ N*6i P*7e 4a3b+ 7e7f G*2e 2d1c 7g7f
 7d7f P*7g 5i6i+ 2e1d 1c1d
2/3
info depth 15 seldepth 25 time 4388 nodes 1286353 nps 293152 hashfull 92 score c
p -559 multipv 1 pv N*4d 5b5c S*4b 2d4b 6f5g G*7i 6i7i 2i5i+ G*6i 2f7f L*7g 5i5g
 G*6g 5g4g 4d3b+ S*5f 7g7f 8d7f 5d6c+ 5c6c R*6b 6c5c 6b4b+
3/3
info depth 15 seldepth 25 time 5706 nodes 1965425 nps 344448 hashfull 151 score
cp -3196 multipv 1 pv G*3c 4c3d+ S*2h 9h2h 3i2h+ 2i2h R*4h G*3h 4h4b+ 3d3c 2b3c
B*3d N*2c 2d2c+ 3c2c 3d2c+ 1b2c S*3d 2c3b N*4d 6f4d

・mingw版のベンチ
time = 9496ms
1/3
info depth 15 seldepth 22 time 1841 nodes 826225 nps 448791 hashfull 33 score cp
 321 multipv 1 pv 8d7d P*7f B*6h S*7h 5i7i+ 8h8g 6h7g+ 8g7g G*6h B*8g 6h7h 7g6f
7h7g 4a3b+ 7g8g G*2e 2d1c 2e1d 1c1d
2/3
info depth 15 seldepth 24 time 3027 nodes 1293965 nps 427474 hashfull 85 score c
p -454 multipv 1 pv N*4d 5b5c S*4b 2d4b 6f5g G*7i 6i5h 2g3g L*4f P*4e 5d4e 5c4d
G*3d 4d5e 7b7c 2f2h+ L*4h 5e6e P*6f 6e7e 7c7d 7e8e 4e6c+ 8e9f 7d8d
3/3
info depth 15 seldepth 25 time 4586 nodes 2294307 nps 500284 hashfull 163 score
cp -2729 multipv 1 pv G*3c 4b3b S*2h 9h2h 3i2h+ 2i2h R*4h G*3h 4h4c+ 3b2b 1b2b S
*2c 3c2c 2d2c+ 2b2c G*3d 4c3d 3e3d 2c3d R*3a G*3c G*3e 3d4c 3a4a+ P*4b

・6/2 指し手生成ベンチ mingw

$ gikou --bench-movegen 1000000
Start Move Generation Benchmark!

Position=lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1
Iterations Finished.
Iteration=1000000, Time=0.188sec, Speed=5319149times/sec.
1g1f 2g2f 3g3f 4g4f 5g5f 6g6f 7g7f 8g8f 9g9f 1i1h 9i9h 3i3h 3i4h 7i6h 7i7h 4i3h
4i4h 4i5h 6i5h 6i6h 6i7h 2h1h 2h3h 2h4h 2h5h 2h6h 2h7h 5i4h 5i5h 5i6h

Position=l6nl/5+P1gk/2np1S3/p1p4Pp/3P2Sp1/1PPb2P1P/P5GS1/R8/LN4bKL w RGgsn5p 1
Iterations Finished.
Iteration=1000000, Time=0.291sec, Speed=3436426times/sec.
7c6e 3i1g+ 3i2h+ 3i4h+ 3i5g+ 6f4h+ 6f5g+ 6f7g+ 6f8h+ 6f9i+ 1d1e 2e2f 6c6d 7d7e 9
d9e 9a9b 9a9c 2a1c 2a3c 7c8e 2b1c 2b2c 2b3b 2b3c 6f3c 6f4d 6f5e 6f7e 6f8d 6f9c 1
b1c 1b2c P*3a P*3b P*3c P*3d P*3h P*4a P*4d P*4e P*4f P*4g P*4h P*5a P*5b P*5c P
*5d P*5e P*5f P*5g P*5h P*8a P*8b P*8c P*8d P*8e P*8g P*8h G*4i S*4i G*5i S*5i G
*6i S*6i G*7i S*7i G*1h S*1h G*2h S*2h G*3h S*3h G*4h S*4h G*5h S*5h G*6h S*6h G
*7h S*7h G*8h S*8h G*1c S*1c N*1c G*1e S*1e N*1e G*1g S*1g N*1g G*2c S*2c N*2c G
*2f S*2f N*2f G*3a S*3a N*3a G*3b S*3b N*3b G*3c S*3c N*3c G*3d S*3d N*3d G*4a S
*4a N*4a G*4d S*4d N*4d G*4e S*4e N*4e G*4f S*4f N*4f G*4g S*4g N*4g G*5a S*5a N
*5a G*5b S*5b N*5b G*5c S*5c N*5c G*5d S*5d N*5d G*5e S*5e N*5e G*5f S*5f N*5f G
*5g S*5g N*5g G*6a S*6a N*6a G*6b S*6b N*6b G*6d S*6d N*6d G*6g S*6g N*6g G*7a S
*7a N*7a G*7b S*7b N*7b G*7e S*7e N*7e G*7g S*7g N*7g G*8a S*8a N*8a G*8b S*8b N
*8b G*8c S*8c N*8c G*8d S*8d N*8d G*8e S*8e N*8e G*8g S*8g N*8g G*9b S*9b N*9b G
*9c S*9c N*9c G*9e S*9e N*9e G*9f S*9f N*9f

・6/2 指し手生成ベンチ msvc
I:\projects\Gikou\x64\Release>gikou --bench-movegen 1000000
Start Move Generation Benchmark!

Position=lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1
Iterations Finished.
Iteration=1000000, Time=0.474sec, Speed=2109705times/sec.
1g1f 2g2f 3g3f 4g4f 5g5f 6g6f 7g7f 8g8f 9g9f 1i1h 9i9h 3i3h 3i4h 7i6h 7i7h 4i3h
4i4h 4i5h 6i5h 6i6h 6i7h 2h1h 2h3h 2h4h 2h5h 2h6h 2h7h 5i4h 5i5h 5i6h

Position=l6nl/5+P1gk/2np1S3/p1p4Pp/3P2Sp1/1PPb2P1P/P5GS1/R8/LN4bKL w RGgsn5p 1
Iterations Finished.
Iteration=1000000, Time=0.898sec, Speed=1113586times/sec.
7c6e 3i1g+ 3i2h+ 3i4h+ 3i5g+ 6f4h+ 6f5g+ 6f7g+ 6f8h+ 6f9i+ 1d1e 2e2f 6c6d 7d7e 9
d9e 9a9b 9a9c 2a1c 2a3c 7c8e 2b1c 2b2c 2b3b 2b3c 6f3c 6f4d 6f5e 6f7e 6f8d 6f9c 1
b1c 1b2c P*3a P*3b P*3c P*3d P*3h P*4a P*4d P*4e P*4f P*4g P*4h P*5a P*5b P*5c P
*5d P*5e P*5f P*5g P*5h P*8a P*8b P*8c P*8d P*8e P*8g P*8h G*4i S*4i G*5i S*5i G
*6i S*6i G*7i S*7i G*1h S*1h G*2h S*2h G*3h S*3h G*4h S*4h G*5h S*5h G*6h S*6h G
*7h S*7h G*8h S*8h G*1c S*1c N*1c G*1e S*1e N*1e G*1g S*1g N*1g G*2c S*2c N*2c G
*2f S*2f N*2f G*3a S*3a N*3a G*3b S*3b N*3b G*3c S*3c N*3c G*3d S*3d N*3d G*4a S
*4a N*4a G*4d S*4d N*4d G*4e S*4e N*4e G*4f S*4f N*4f G*4g S*4g N*4g G*5a S*5a N
*5a G*5b S*5b N*5b G*5c S*5c N*5c G*5d S*5d N*5d G*5e S*5e N*5e G*5f S*5f N*5f G
*5g S*5g N*5g G*6a S*6a N*6a G*6b S*6b N*6b G*6d S*6d N*6d G*6g S*6g N*6g G*7a S
*7a N*7a G*7b S*7b N*7b G*7e S*7e N*7e G*7g S*7g N*7g G*8a S*8a N*8a G*8b S*8b N
*8b G*8c S*8c N*8c G*8d S*8d N*8d G*8e S*8e N*8e G*8g S*8g N*8g G*9b S*9b N*9b G
*9c S*9c N*9c G*9e S*9e N*9e G*9f S*9f N*9f




・Gikouで使われているSSE命令

builtin関数
__builtin_ctz
__builtin_ctzll
__builtin_clz
__builtin_clzll
__builtin_popcount
__builtin_popcountll

__builtin_prefetch

SSE命令
_mm_or_si128 SSE2
_mm_and_si128 SSE2
_mm_xor_si128 SSE2
_mm_andnot_si128 SSE2

_mm_set_epi8   SSE2
_mm_set1_epi8  SSE2
_mm_set_epi16  SSE2
_mm_set1_epi16 SSE2
_mm_set_epi64x SSE2 
_mm_setzero_si128 SSE2

_mm_cmpeq_epi8 SSE2
_mm_cmpgt_epi8 SSE2
_mm_cmpeq_epi16 SSE2

_mm_testc_si128 SSE4
_mm_testz_si128 SSE4

_mm_extract_epi64 SSE4 x64
_mm_insert_epi64 SSE4 x64

_mm_slli_si128 SSE2
_mm_srli_si128 SSE2
_mm_slli_epi64 SSE2
_mm_srli_epi64 SSE2
_mm_slli_epi16 SSE2

_mm_shuffle_epi8  SSE3
_mm_movemask_epi8 SSE2
_mm_cvtepu8_epi16 SSE4
_mm_min_epu16 SSE4
_mm_min_epu8  SSE2
_mm_add_epi16 SSE2
_mm_add_epi8  SSE2
_mm_subs_epu8 SSE2
_mm_sub_epi8  SSE2
_mm_loadu_si128 SSE2
_mm_storeu_si128 SSE2
_mm_movpi64_epi64 SSE2


